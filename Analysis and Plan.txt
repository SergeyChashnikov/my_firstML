
Критерии для анализа кода:

    
1. Изменение имен переменных, классов, объектов на осмысленные.

2. Устранение дублирования кода. Если код повторяется больше одного раза,
   то нужно вынести его в отдельную функцию или метод.

3. Разделение больших функций. Если функция или метод слишком большие и не
   помещаются на одном экране, рекомендуется разбить их на две части
   (или больше, если это требуется).

4. Разделение больших файлов. По аналогии с большими функциями, которые сложно
   понять, крупные файлы тоже лучше разделять на несколько более маленьких.
   Отдельные файлы затем подключаются к основному файлу с кодом. 

5. Удаление мертвого кода.  Когда программа изменяется со временем, некоторые ее
   участки перестают использоваться. Они могут быть закомментированы или просто
   никогда не вызываться. Аналогичная ситуация возможна с аргументами функций:
   когда-то они были полезные, но со временем перестали использоваться.
   Такие участки мертвого кода лучше удалять. Во-первых, наличие мертвого кода
   затрудняет понимание, что делает та или иная функция. Во-вторых, изменяя код
   функции, можно случайно сделать так, чтобы мертвый код снова заработал,
   что может привести к ошибкам.

Анализ кода в репозитории:

1. Изменить имена переменных в Chashnikov.py:
      - res поменять на text_input
      - trans поменять на translation_text

2. Редактирование кода по правилам PEP8: 
      - после импорта две строки
      - удаление лишних пустых строк
      - добавление комментариев по работе кода

3. Удаление мертвого кода